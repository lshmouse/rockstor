#!/usr/bin/env bash
# The RockStor command script
#
# Environment Variables
#
#   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
#
#   ROCKSTOR_CLASSPATH Extra Java CLASSPATH entries.
#
#   ROCKSTOR_USER_CLASSPATH_FIRST      When defined, the ROCKSTOR_CLASSPATH is
#                                    added in the beginning of the global
#                                    classpath. Can be defined, for example,
#                                    by doing
#                                    export ROCKSTOR_USER_CLASSPATH_FIRST=true
#
#   ROCKSTOR_HEAPSIZE  The maximum amount of heap to use, in MB.
#                    Default is 1000.
#
#   ROCKSTOR_OPTS      Extra Java runtime options.
#
#   ROCKSTOR_ROCKSERVER_OPTS       These options are added to ROCKSTOR_OPTS
#   ROCKSTOR_MASTER_OPTS         when the respective command is run.
#   ROCKSTOR_{COMMAND}_OPTS etc  ROCKSTOR_JT_OPTS applies to JobTracker
#                              for e.g.  ROCKSTOR_CLIENT_OPTS applies to
#                              more than one command (fs, dfs, fsck,
#                              dfsadmin etc)
#
#   ROCKSTOR_CONF_DIR  Alternate conf dir. Default is ${ROCKSTOR_HOME}/conf.
#
#   ROCKSTOR_ROOT_LOGGER The root appender. Default is INFO,console
#

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`

. "$bin"/rockstor-config.sh

ROCKSTOR_IDENT_STRING=${ROCKSTOR_IDENT_STRING:-$USER}

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: rockstor [--config confdir] COMMAND"
  echo "where COMMAND is one of:"
  echo "  format               format the rockstor file system"
  echo "  compact      		   compact rockstor file system"
  echo "  rockserver           run a rockserver"
  #echo "  version              print the version"
  echo "  classpath            prints the class path needed to get the"
  echo "                       RockStor jar and the required libraries"
  #echo "  daemonlog            get/set the log level for each daemon"
  #echo " or"
  #echo "  CLASSNAME            run the class named CLASSNAME"
  echo "Most commands print help when invoked w/o parameters."
  exit 1
fi

# get arguments
COMMAND=$1
shift

#ROCKSTOR_CONF_DIR=~/testbed/share-conf

if [ -f "${ROCKSTOR_CONF_DIR}/rockstor-env.sh" ]; then
  . "${ROCKSTOR_CONF_DIR}/rockstor-env.sh"
fi

# some Java parameters
if [ "$JAVA_HOME" != "" ]; then
  #echo "run java in $JAVA_HOME"
  JAVA_HOME=$JAVA_HOME
fi

if [ "$JAVA_HOME" = "" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m

# check envvars which might override default args
if [ "$ROCKSTOR_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $ROCKSTOR_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$ROCKSTOR_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi

# CLASSPATH initially contains $ROCKSTOR_CONF_DIR
CLASSPATH="${ROCKSTOR_CONF_DIR}"
CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar
if [ "$ROCKSTOR_USER_CLASSPATH_FIRST" != "" ] && [ "$ROCKSTOR_CLASSPATH" != "" ] ; then
  CLASSPATH=${CLASSPATH}:${ROCKSTOR_CLASSPATH}
fi

# for developers, add RockStor classes to CLASSPATH
if [ -d "$ROCKSTOR_HOME/build/classes" ]; then
  CLASSPATH=${CLASSPATH}:$ROCKSTOR_HOME/build/classes
fi
if [ -d "$ROCKSTOR_HOME/build/webapps" ]; then
  CLASSPATH=${CLASSPATH}:$ROCKSTOR_HOME/build
fi
if [ -d "$ROCKSTOR_HOME/build/test/classes" ]; then
  CLASSPATH=${CLASSPATH}:$ROCKSTOR_HOME/build/test/classes
fi
if [ -d "$ROCKSTOR_HOME/build/tools" ]; then
  CLASSPATH=${CLASSPATH}:$ROCKSTOR_HOME/build/tools
fi

# so that filenames w/ spaces are handled correctly in loops below
IFS=

# for releases, add core rockstor jar & webapps to CLASSPATH
if [ -d "$ROCKSTOR_HOME/webapps" ]; then
  CLASSPATH=${CLASSPATH}:$ROCKSTOR_HOME
fi

ROCKSTOR_LIB_HOME=$ROCKSTOR_HOME

# add libs to CLASSPATH
for f in $ROCKSTOR_LIB_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $ROCKSTOR_LIB_HOME/lib/jsp-2.1/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $ROCKSTOR_LIB_HOME/lib/rockstor.dar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $ROCKSTOR_CONF_DIR/*.xml; do
  CLASSPATH=${CLASSPATH}:$f;
done

# add user-specified CLASSPATH last
if [ "$ROCKSTOR_USER_CLASSPATH_FIRST" = "" ] && [ "$ROCKSTOR_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${ROCKSTOR_CLASSPATH}
fi

# default log directory & file
if [ "$ROCKSTOR_LOG_DIR" = "" ]; then
  ROCKSTOR_LOG_DIR="$ROCKSTOR_HOME/logs"
fi
if [ "$ROCKSTOR_LOGFILE" = "" ]; then
  ROCKSTOR_LOGFILE='rockstor-$USER-rockserver-$HOSTNAME.log'
fi

# default policy file for service-level authorization
#if [ "$ROCKSTOR_POLICYFILE" = "" ]; then
#  ROCKSTOR_POLICYFILE="rockstor-policy.xml"
#fi

# restore ordinary behaviour
unset IFS

# figure out which class to run
if [ "$COMMAND" = "classpath" ] ; then
  if $cygwin; then
    CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  fi
  echo $CLASSPATH
  exit
elif [ "$COMMAND" = "format" ] ; then
  CLASS='com.rockstor.tools.RockStorFsFormat'
  ROCKSTOR_OPTS="$ROCKSTOR_OPTS"
elif [ "$COMMAND" = "compact" ] ; then
  CLASS='com.rockstor.tools.CompactorTool'
  ROCKSTOR_OPTS="$ROCKSTOR_OPTS $ROCKSTOR_MASTER_OPTS"
elif [ "$COMMAND" = "rockserver" ] ; then
  CLASS='com.rockstor.rockserver.Main'
  ROCKSTOR_OPTS="$ROCKSTOR_OPTS $ROCKSTOR_ROCKSERVER_OPTS"
else
  CLASS=$COMMAND
fi


# cygwin path translation
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  ROCKSTOR_HOME=`cygpath -w "$ROCKSTOR_HOME"`
  ROCKSTOR_LOG_DIR=`cygpath -w "$ROCKSTOR_LOG_DIR"`
  TOOL_PATH=`cygpath -p -w "$TOOL_PATH"`
  JAVA_LIBRARY_PATH=`cygpath -p -w "$JAVA_LIBRARY_PATH"`
fi

# setup 'java.library.path' for native-rockstor code if necessary
if [ -d "${ROCKSTOR_HOME}/build/native" -o -d "${ROCKSTOR_HOME}/lib/native" -o -d "${ROCKSTOR_HOME}/sbin" ]; then
#  JAVA_PLATFORM=`CLASSPATH=${CLASSPATH} ${JAVA} -Xmx32m ${ROCKSTOR_JAVA_PLATFORM_OPTS} org.apache.rockstor.util.PlatformName | sed -e "s/ /_/g"`

  JAVA_PLATFORM=""
  if [ 0 -eq `uname -a|grep x86_64|wc -l` ]; then
    JAVA_PLATFORM="Linux-i386-32";
  else
    JAVA_PLATFORM="Linux-amd64-64";
  fi
  
  if [ -d "$ROCKSTOR_HOME/build/native" ]; then
    if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
        JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:${ROCKSTOR_HOME}/build/native/${JAVA_PLATFORM}/lib
    else
        JAVA_LIBRARY_PATH=${ROCKSTOR_HOME}/build/native/${JAVA_PLATFORM}/lib
    fi
  fi

  if [ -d "${ROCKSTOR_HOME}/lib/native" ]; then
    if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
      JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:${ROCKSTOR_HOME}/lib/native/${JAVA_PLATFORM}
    else
      JAVA_LIBRARY_PATH=${ROCKSTOR_HOME}/lib/native/${JAVA_PLATFORM}
    fi
  fi

  _JSVC_PATH=${ROCKSTOR_HOME}/sbin/${JAVA_PLATFORM}/jsvc
fi

# cygwin path translation
if $cygwin; then
  JAVA_LIBRARY_PATH=`cygpath -p "$JAVA_LIBRARY_PATH"`
fi

ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Drockstor.log.dir=$ROCKSTOR_LOG_DIR"
ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Drockstor.log.file=$ROCKSTOR_LOGFILE"
ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Drockstor.home.dir=$ROCKSTOR_HOME"
ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Drockstor.id.str=$ROCKSTOR_IDENT_STRING"
ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Drockstor.root.logger=${ROCKSTOR_ROOT_LOGGER:-INFO,console}"
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
fi
ROCKSTOR_OPTS="$ROCKSTOR_OPTS -Drockstor.policy.file=$ROCKSTOR_POLICYFILE"


###########################################################################
# DAEMON SETTINGS
###########################################################################
# For any command that ends in 'node', we are starting one of the daemons.
# In this case, we do some special processing in order to automatically
# setuid to the correct user.
#
# The user itself is determined as one of the following, in descending
# precedence:
#  ROCKSTOR_<node>NODE_USER variable
#  the current userid, so long as that userid is not root
#
# After the above is determined, it is stored into the local variable
# _ROCKSTOR_DAEMON_USER
#
# We also need to determine the "run mode". This can be one of the following:
#
#  "jsvc" - only supported for the datanode - we use the jsvc wrapper in
#           the sbin/<platform> directory in order to setuid to the target
#           user. Requires that this script is running as root.
#  "su" -   supported only when running as root and /bin/su exists.
#           Uses su in order to assume the identity of the daemon user.
#  "normal" - supported only when already running as the target user.
###########################################################################
if [[ "$COMMAND" == *server ]] ; then
  command_uc=$(echo $COMMAND| tr a-z A-Z)
  user_var="ROCKSTOR_${command_uc}_USER"
  _ROCKSTOR_DAEMON_USER=$(eval "echo \$$user_var")
  _ROCKSTOR_DAEMON_USER=${_ROCKSTOR_DAEMON_USER:-$(id -un)}

  if [ -z "$_ROCKSTOR_DAEMON_USER" ]; then
    echo Please specify a user to run the $COMMAND by setting $user_var
    exit 1
  elif  [ "$_ROCKSTOR_DAEMON_USER" == "root" ]; then
    echo May not run daemons as root. Please specify $user_var
    exit 1
  fi

  if [ "$EUID" = "0" ] ; then
    if [ "$COMMAND" == "rockserver" ] && [ -x "$_JSVC_PATH" ]; then
      _ROCKSTOR_RUN_MODE="jsvc"
    elif [ -x /bin/su ]; then
      _ROCKSTOR_RUN_MODE="su"
    else
      echo "Daemon wants to run as $_ROCKSTOR_DAEMON_USER but script is running as root"
      echo "and su is not available."
      exit 1
    fi
  else
    # We must be running as the user we want to run as, if we can't use jsvc or su
    # to drop privileges
    if [ "$_ROCKSTOR_DAEMON_USER" != "$(whoami)" ]; then
      echo Daemon wants to run as $_ROCKSTOR_DAEMON_USER but not running as that user or root.
      exit 1
    fi
    _ROCKSTOR_RUN_MODE="normal"
  fi
else
  # Normal client command
  _ROCKSTOR_RUN_MODE="normal"
fi

###########################################################################
# Actually run the JVM
###########################################################################
case "$_ROCKSTOR_RUN_MODE" in
  jsvc)
    case "$COMMAND" in
      datanode)
        _JSVC_STARTER_CLASS=com.rockstor.rockserver.SecureRockServerStarter
      ;;
      *)
        echo "Cannot start $COMMAND with jsvc"
        exit 1
      ;;
    esac

    if [ "$_ROCKSTOR_DAEMON_DETACHED" = "true" ]; then
      _JSVC_FLAGS="-pidfile $_ROCKSTOR_DAEMON_PIDFILE
                  -errfile &1
                  -outfile $_ROCKSTOR_DAEMON_OUT"
    else
      # Even though we are trying to run a non-detached datanode,
      # jsvc will not write to stdout/stderr, so we have to pipe
      # it and tail the logfile.
      log_path=/tmp/jsvc_${COMMAND}.$$
      _JSVC_FLAGS="-nodetach
                   -errfile &1
                   -outfile $log_path"
      echo Non-detached jsvc output piping to: $log_path
      touch $log_path
      tail -f $log_path &
    fi
    unset _ROCKSTOR_DAEMON_DETACHED

    exec "$_JSVC_PATH" -Dproc_$COMMAND \
                       $_JSVC_FLAGS \
                       -user "$_ROCKSTOR_DAEMON_USER" \
                       -cp "$CLASSPATH" \
                       $JAVA_HEAP_MAX $ROCKSTOR_OPTS \
                       $_JSVC_STARTER_CLASS "$@"
  ;;

  normal | su)
    # If we need to su, tack the command into a local variable
    if [ $_ROCKSTOR_RUN_MODE = "su" ]; then
      _JAVA_EXEC="su $_ROCKSTOR_DAEMON_USER -s $JAVA --"
    else
      _JAVA_EXEC="$JAVA"
    fi

    if [ "$_ROCKSTOR_DAEMON_DETACHED" = "true" ]; then
      unset _ROCKSTOR_DAEMON_DETACHED
      touch $_ROCKSTOR_DAEMON_OUT
      nohup $_JAVA_EXEC -Dproc_$COMMAND $JAVA_HEAP_MAX $ROCKSTOR_OPTS -classpath "$CLASSPATH" $CLASS "$@" > "$_ROCKSTOR_DAEMON_OUT" 2>&1 < /dev/null &
      if [ "$EUID" == "0" ]; then
        chown $_ROCKSTOR_DAEMON_USER $_ROCKSTOR_DAEMON_OUT
      fi
      echo $! > "$_ROCKSTOR_DAEMON_PIDFILE"
      sleep 1
      head "$_ROCKSTOR_DAEMON_OUT"
    else
      # For normal operation, just run the command
      exec $_JAVA_EXEC -Dproc_$COMMAND $JAVA_HEAP_MAX $ROCKSTOR_OPTS -classpath "$CLASSPATH" $CLASS "$@"
    fi
  ;;

  *)
    echo Bad run mode: $_ROCKSTOR_RUN_MODE
    exit 1
  ;;
esac
